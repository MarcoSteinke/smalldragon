TODO:

[ ] maybe implement the primitive "Anything" Type.
    this would be helpful for implementing various subroutines that operate on arrays. i could implement a builtin
    subroutine "arrlen" that would determine the length of any arrays (arrays should be length-prefixed in dragon).
    ...
    thinking about "Anything" Type, what if we shorten that to "*" and it looks even cooler with Type Constraints.
    Like "public Int print((* implements IShow) item){...}".

[ ] write a lot of tests to protect our functional programming features against regression!

[ ] write tests for the different typechecking classes and what they typecheck

[ ] check in typechecking that the correct type signature
    is used for subroutines with side effects ('~>') and for subroutines without side effects ('->')
    and also note it in the symbol table

[ ] typecheck that there should be no assignment to arguments.
    assignment to members of arguments is ok in subroutines with side effecs

[ ] remove array constants from the language, instead replace it in the examples with a subroutine which takes
    a type parameter and length of the array, and returns an array of that type with the specified length
