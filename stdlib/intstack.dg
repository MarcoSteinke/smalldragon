//A naive implementation of a stack of Integers
//This Stack is not growable.

struct IntStack {
	@private uint32 size;
	@private uint32 capacity;
	@private [int] arr;
}

fn intstack_ctor(uint capacity) -> IntStack {

	IntStack s = makeIntStack(0,0,0);
	
	s.size = 0;
	s.capacity = capacity;
	
	s.arr = malloc(4*s.capacity);
	
	return s;
}

fn intstack_dtor(IntStack s) -> bool {

	free(s.arr);
	free(s);

	return true;
}

fn intstack_size(IntStack s) -> uint {
	return s.size;
}

fn intstack_push(IntStack s, int x) -> int {

	if s.size >= s.capacity { exit(1); return 0; }
	
	s.arr[s.size] = x;
	s.size++;
	
	return x;
}

fn intstack_peek(IntStack s) -> int {
	
	if s.size == 0 { exit(1); return 0; }
	return s.arr[s.size - 1];
}

fn intstack_pop(IntStack s) -> int {

	res = intstack_peek(s);
	s.size--;
	
	return res;
}
