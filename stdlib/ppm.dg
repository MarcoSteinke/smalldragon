
//simple (probably buggy) i/o for a subset of the
//https://en.wikipedia.org/wiki/Netpbm#File_formats
//PPM file format in RGB mode (P3)

struct ImagePPM {
	
	uint width;
	uint height;
	
	@private [uint8] data_red;
	@private [uint8] data_green;
	@private [uint8] data_blue;
}

fn ppm_ctor(uint width, uint height) ~> ImagePPM {
	
	ImagePPM resi = malloc(4+4+3*8);
	
	resi.data_red   = malloc(width*height);
	resi.data_green = malloc(width*height);
	resi.data_blue  = malloc(width*height);
	
	resi.width  = width;
	resi.height = height;
	
	for row in 0 .. (height-1) {
		for col in 0 .. (width-1) {
		
			resi.data_red  [row*width + col] = 0;
			resi.data_green[row*width + col] = 0;
			resi.data_blue [row*width + col] = 0;
		}
	}
	
	return resi;
}

fn ppm_dtor(ImagePPM image) ~> bool {

	free(image.data_red);
	free(image.data_green);
	free(image.data_blue);
	free(image);
	return true;
}

fn ppm_pixel_write(
	ImagePPM image, 
	uint row, uint col, 
	uint8 red, uint8 green, uint8 blue
) ~> bool {

	image.data_red  [row*image.width + col] = red;
	image.data_green[row*image.width + col] = green;
	image.data_blue [row*image.width + col] = blue;

	return true;
} 

fn ppm_pixel_read_red(ImagePPM image, uint row, uint col) ~> uint8 {
	return image.data_red[row*image.width + col];
}
fn ppm_pixel_read_green(ImagePPM image, uint row, uint col) ~> uint8 {
	return image.data_green[row*image.width + col];
}
fn ppm_pixel_read_blue(ImagePPM image, uint row, uint col) ~> uint8 {
	return image.data_blue[row*image.width + col];
}

fn ppm_read([char] filename) ~> ImagePPM {

	file = fopen(filename, "r");

	[char] s = malloc(100);
	
	fscanf(file, "%s\n", s);
	
	uint width  = readuint8(file);
	uint height = readuint8(file);
	
	ImagePPM resimg = ppm_ctor(width, height);
	
	for row in 0 .. (height-1) {
		for col in 0 .. (width-1) {
		
			resimg.data_red  [row*width + col] = readuint8(file);
			resimg.data_green[row*width + col] = readuint8(file);
			resimg.data_blue [row*width + col] = readuint8(file);
		}
	}
	
	fclose(file);
	free(s);
	
	return resimg;
}

fn ppm_write(ImagePPM image, [char] filename) ~> bool {

	uint width  = image.width;
	uint height = image.height;
	
	file = fopen(filename, "w");
	
	fprintf(file, "P3\n");
	fprintf(file, "%d %d\n", width, height);
	fprintf(file, "255\n");
	
	for row in 0 .. (height-1) {
		for col in 0 .. (width-1) {
		
			fprintf(file, "%d ", image.data_red  [row*width + col]);
			fprintf(file, "%d ", image.data_green[row*width + col]);
			fprintf(file, "%d ", image.data_blue [row*width + col]);
			fprintf(file, "\n");
		}
	}

	fclose(file);

	return true;
}

@private
fn readuint8(_IO_FILE file) ~> uint8 {
	
	int c = 0;
	
	while !('0' <= c <= '9') {
		
		c = fgetc(file);
	}
	
	uint8 r = 0;
	
	for i in 0 .. 2 {
	
		r += (c - 48) * ipow(10, (2-i));
		c = fgetc(file);
	}
	
	return r;
}
