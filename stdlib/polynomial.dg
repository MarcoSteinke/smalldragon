
//simple implementation of some subroutines for calculations on polynomials
//this (struct Poly) should become a generic type once smalldragon support them.

struct Poly {
	[float] coeff;
	uint16 n;
}

fn poly_ctor(uint count) -> Poly{
	res = makePoly(0,0);
	res.n = count;
	res.coeff = malloc(8*count);
	return res;
}

fn poly_ctor_5(float a4, float a3, float a2, float a1, float a0) -> Poly {

	res = poly_ctor(5);
	res.coeff[0] = a0;
	res.coeff[1] = a1;
	res.coeff[2] = a2;
	res.coeff[3] = a3;
	res.coeff[4] = a4;
	return res;
}
fn poly_ctor_4(float a3, float a2, float a1, float a0) -> Poly {
	return poly_ctor_5(0,a3,a2,a1,a0);
}
fn poly_ctor_3(float a2, float a1, float a0) -> Poly { 
	return poly_ctor_4(0,a2,a1,a0); 
}
fn poly_ctor_2(float a1, float a0) -> Poly { return poly_ctor_3(0,a1,a0); }
fn poly_ctor_1(float a0) -> Poly { return poly_ctor_2(0,a0); }

fn poly_dtor(Poly p) -> bool {
	free(p.coeff);
	free(p);
	return true;
}

fn poly_deg(Poly p) -> uint {
	uint i = p.n - 1;
	while i >= 0 {
		if p.coeff[i] != 0.0 { return i; }
		i -= 1;
	}
	return 0;
}

fn poly_add(Poly a, Poly b) -> Poly {
	res = poly_ctor(max(a.n, b.n));
	for i in 0 .. res.n - 1 {
		res.coeff[i] = 0.0;
		if i < a.n { res.coeff[i] += a.coeff[i]; }
		if i < b.n { res.coeff[i] += b.coeff[i]; }
	}
	return res;
}

fn poly_sub(Poly a, Poly b) -> Poly {
	res = poly_ctor(max(a.n, b.n));
	for i in 0 .. res.n - 1 {
		res.coeff[i] = 0.0;
		if i < a.n { res.coeff[i] += a.coeff[i]; }
		if i < b.n { res.coeff[i] -= b.coeff[i]; }
	}
	return res;
}

fn poly_mul(Poly a, Poly b) -> Poly {
	//(a0, a1, ...)(b0, b1, ...)
	
	res = poly_ctor(a.n + b.n);
	
	for n in 0 .. res.n - 1 {
		
		k = 0.0;
		for i in 0 .. n {
			k1 = safeIndex(a.coeff, a.n, i);
			k2 = safeIndex(b.coeff, b.n, n-i);
			k += k1 * k2;
		}
		
		res.coeff[n] = k;
	}
	
	return res;
}

fn poly_print(Poly p) -> bool {

	int i = p.n - 1;
	uint count_printed = 0;
	while i >= 0 {
		float c = p.coeff[i];
		
		if c != 0 {
			if count_printed > 0 {
				printf(" + ");
			}
			printf("%f", c);
			if i > 0 {
				printf("x^%d", i);
			}
			count_printed += 1;
		}
		i -= 1;
	}
	printf("\n");
	return true;
}

fn poly_eval(Poly p, int x) -> float {

	float res = 0;
	for i in 0 .. p.n - 1 {
		res += p.coeff[i] * pow(x, i);
	}
	return res;
}

fn poly_derivative(Poly p) -> Poly {

	// a x ^ n -> (a*n) x ^ (n-1)
	
	res = poly_ctor(p.n - 1);
	
	for i in 0 .. res.n - 1 {
		res.coeff[i] = p.coeff[i+1] * (i+1.0);
	}
	return res;
}

fn poly_integral(Poly p) -> Poly {

	// a x ^ n -> (a / (n+1)) x ^ (n+1)
	
	res = poly_ctor(p.n + 1);
	
	for i in 1 .. res.n - 1 {
		res.coeff[i] = p.coeff[i-1] / (i * 1.0);
	}
	return res;
}

fn safeIndex([float] arr, uint size, uint index) -> float {

	if index >= size { return 0.0; }
	return arr[index];
}
