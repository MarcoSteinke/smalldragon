subroutine Main_main 0 args 0 locals       //pushes ebp, swaps that with the return address already on stack//
        iconst 2
        call Builtin_malloc       //pushes return address of current subroutine on the stack,jumps to subroutine,swaps returned value (on stack) with ebp, pops ebp
        swap       //remove previously pushed arguments
        pop       //remove previously pushed arguments
        dup
        iconst 0
        iconst 104
        arraystore
        dup
        iconst 1
        iconst 105
        arraystore
        call Base_println       //pushes return address of current subroutine on the stack,jumps to subroutine,swaps returned value (on stack) with ebp, pops ebp
        swap       //remove previously pushed arguments off the stack
        pop       //remove previously pushed arguments off the stack
        pop
        iconst 1
        call Math_abs       //pushes return address of current subroutine on the stack,jumps to subroutine,swaps returned value (on stack) with ebp, pops ebp
        swap       //remove previously pushed arguments off the stack
        pop       //remove previously pushed arguments off the stack
        call Base_println       //pushes return address of current subroutine on the stack,jumps to subroutine,swaps returned value (on stack) with ebp, pops ebp
        swap       //remove previously pushed arguments off the stack
        pop       //remove previously pushed arguments off the stack
        pop
        iconst -2
        call Math_abs       //pushes return address of current subroutine on the stack,jumps to subroutine,swaps returned value (on stack) with ebp, pops ebp
        swap       //remove previously pushed arguments off the stack
        pop       //remove previously pushed arguments off the stack
        call Base_println       //pushes return address of current subroutine on the stack,jumps to subroutine,swaps returned value (on stack) with ebp, pops ebp
        swap       //remove previously pushed arguments off the stack
        pop       //remove previously pushed arguments off the stack
        pop
        iconst 8
        call Builtin_malloc       //pushes return address of current subroutine on the stack,jumps to subroutine,swaps returned value (on stack) with ebp, pops ebp
        swap       //remove previously pushed arguments
        pop       //remove previously pushed arguments
        dup
        iconst 0
        iconst 115
        arraystore
        dup
        iconst 1
        iconst 105
        arraystore
        dup
        iconst 2
        iconst 103
        arraystore
        dup
        iconst 3
        iconst 110
        arraystore
        dup
        iconst 4
        iconst 40
        arraystore
        dup
        iconst 5
        iconst 52
        arraystore
        dup
        iconst 6
        iconst 41
        arraystore
        dup
        iconst 7
        iconst 58
        arraystore
        call Base_println       //pushes return address of current subroutine on the stack,jumps to subroutine,swaps returned value (on stack) with ebp, pops ebp
        swap       //remove previously pushed arguments off the stack
        pop       //remove previously pushed arguments off the stack
        pop
        iconst 4
        call Math_sign       //pushes return address of current subroutine on the stack,jumps to subroutine,swaps returned value (on stack) with ebp, pops ebp
        swap       //remove previously pushed arguments off the stack
        pop       //remove previously pushed arguments off the stack
        call Base_println       //pushes return address of current subroutine on the stack,jumps to subroutine,swaps returned value (on stack) with ebp, pops ebp
        swap       //remove previously pushed arguments off the stack
        pop       //remove previously pushed arguments off the stack
        pop
        iconst 8
        call Builtin_malloc       //pushes return address of current subroutine on the stack,jumps to subroutine,swaps returned value (on stack) with ebp, pops ebp
        swap       //remove previously pushed arguments
        pop       //remove previously pushed arguments
        dup
        iconst 0
        iconst 115
        arraystore
        dup
        iconst 1
        iconst 105
        arraystore
        dup
        iconst 2
        iconst 103
        arraystore
        dup
        iconst 3
        iconst 110
        arraystore
        dup
        iconst 4
        iconst 40
        arraystore
        dup
        iconst 5
        iconst 45
        arraystore
        dup
        iconst 6
        iconst 51
        arraystore
        dup
        iconst 7
        iconst 41
        arraystore
        call Base_println       //pushes return address of current subroutine on the stack,jumps to subroutine,swaps returned value (on stack) with ebp, pops ebp
        swap       //remove previously pushed arguments off the stack
        pop       //remove previously pushed arguments off the stack
        pop
        iconst -3
        call Math_sign       //pushes return address of current subroutine on the stack,jumps to subroutine,swaps returned value (on stack) with ebp, pops ebp
        swap       //remove previously pushed arguments off the stack
        pop       //remove previously pushed arguments off the stack
        call Base_println       //pushes return address of current subroutine on the stack,jumps to subroutine,swaps returned value (on stack) with ebp, pops ebp
        swap       //remove previously pushed arguments off the stack
        pop       //remove previously pushed arguments off the stack
        pop
        iconst 9
        call Builtin_malloc       //pushes return address of current subroutine on the stack,jumps to subroutine,swaps returned value (on stack) with ebp, pops ebp
        swap       //remove previously pushed arguments
        pop       //remove previously pushed arguments
        dup
        iconst 0
        iconst 115
        arraystore
        dup
        iconst 1
        iconst 113
        arraystore
        dup
        iconst 2
        iconst 114
        arraystore
        dup
        iconst 3
        iconst 116
        arraystore
        dup
        iconst 4
        iconst 40
        arraystore
        dup
        iconst 5
        iconst 52
        arraystore
        dup
        iconst 6
        iconst 46
        arraystore
        dup
        iconst 7
        iconst 48
        arraystore
        dup
        iconst 8
        iconst 41
        arraystore
        call Base_println       //pushes return address of current subroutine on the stack,jumps to subroutine,swaps returned value (on stack) with ebp, pops ebp
        swap       //remove previously pushed arguments off the stack
        pop       //remove previously pushed arguments off the stack
        pop
        fconst 4.0
        call Math_sqrt       //pushes return address of current subroutine on the stack,jumps to subroutine,swaps returned value (on stack) with ebp, pops ebp
        swap       //remove previously pushed arguments off the stack
        pop       //remove previously pushed arguments off the stack
        call Base_println       //pushes return address of current subroutine on the stack,jumps to subroutine,swaps returned value (on stack) with ebp, pops ebp
        swap       //remove previously pushed arguments off the stack
        pop       //remove previously pushed arguments off the stack
        pop
        iconst 8
        call Builtin_malloc       //pushes return address of current subroutine on the stack,jumps to subroutine,swaps returned value (on stack) with ebp, pops ebp
        swap       //remove previously pushed arguments
        pop       //remove previously pushed arguments
        dup
        iconst 0
        iconst 112
        arraystore
        dup
        iconst 1
        iconst 111
        arraystore
        dup
        iconst 2
        iconst 119
        arraystore
        dup
        iconst 3
        iconst 40
        arraystore
        dup
        iconst 4
        iconst 50
        arraystore
        dup
        iconst 5
        iconst 44
        arraystore
        dup
        iconst 6
        iconst 51
        arraystore
        dup
        iconst 7
        iconst 41
        arraystore
        call Base_println       //pushes return address of current subroutine on the stack,jumps to subroutine,swaps returned value (on stack) with ebp, pops ebp
        swap       //remove previously pushed arguments off the stack
        pop       //remove previously pushed arguments off the stack
        pop
        iconst 3
        iconst 2
        call Math_pow       //pushes return address of current subroutine on the stack,jumps to subroutine,swaps returned value (on stack) with ebp, pops ebp
        swap       //remove previously pushed arguments off the stack
        pop       //remove previously pushed arguments off the stack
        swap       //remove previously pushed arguments off the stack
        pop       //remove previously pushed arguments off the stack
        call Base_println       //pushes return address of current subroutine on the stack,jumps to subroutine,swaps returned value (on stack) with ebp, pops ebp
        swap       //remove previously pushed arguments off the stack
        pop       //remove previously pushed arguments off the stack
        pop
        iconst 2
        call Builtin_malloc       //pushes return address of current subroutine on the stack,jumps to subroutine,swaps returned value (on stack) with ebp, pops ebp
        swap       //remove previously pushed arguments
        pop       //remove previously pushed arguments
        dup
        iconst 0
        iconst 51
        arraystore
        dup
        iconst 1
        iconst 33
        arraystore
        call Base_println       //pushes return address of current subroutine on the stack,jumps to subroutine,swaps returned value (on stack) with ebp, pops ebp
        swap       //remove previously pushed arguments off the stack
        pop       //remove previously pushed arguments off the stack
        pop
        iconst 3
        call Math_faculty       //pushes return address of current subroutine on the stack,jumps to subroutine,swaps returned value (on stack) with ebp, pops ebp
        swap       //remove previously pushed arguments off the stack
        pop       //remove previously pushed arguments off the stack
        call Base_println       //pushes return address of current subroutine on the stack,jumps to subroutine,swaps returned value (on stack) with ebp, pops ebp
        swap       //remove previously pushed arguments off the stack
        pop       //remove previously pushed arguments off the stack
        pop
        call Base_println       //pushes return address of current subroutine on the stack,jumps to subroutine,swaps returned value (on stack) with ebp, pops ebp
        swap       //remove previously pushed arguments off the stack
        pop       //remove previously pushed arguments off the stack
        pop
        iconst 8
        call Builtin_malloc       //pushes return address of current subroutine on the stack,jumps to subroutine,swaps returned value (on stack) with ebp, pops ebp
        swap       //remove previously pushed arguments
        pop       //remove previously pushed arguments
        dup
        iconst 0
        iconst 109
        arraystore
        dup
        iconst 1
        iconst 97
        arraystore
        dup
        iconst 2
        iconst 120
        arraystore
        dup
        iconst 3
        iconst 40
        arraystore
        dup
        iconst 4
        iconst 50
        arraystore
        dup
        iconst 5
        iconst 44
        arraystore
        dup
        iconst 6
        iconst 54
        arraystore
        dup
        iconst 7
        iconst 41
        arraystore
        call Base_println       //pushes return address of current subroutine on the stack,jumps to subroutine,swaps returned value (on stack) with ebp, pops ebp
        swap       //remove previously pushed arguments off the stack
        pop       //remove previously pushed arguments off the stack
        pop
        iconst 6
        iconst 2
        call Math_max       //pushes return address of current subroutine on the stack,jumps to subroutine,swaps returned value (on stack) with ebp, pops ebp
        swap       //remove previously pushed arguments off the stack
        pop       //remove previously pushed arguments off the stack
        swap       //remove previously pushed arguments off the stack
        pop       //remove previously pushed arguments off the stack
        call Base_println       //pushes return address of current subroutine on the stack,jumps to subroutine,swaps returned value (on stack) with ebp, pops ebp
        swap       //remove previously pushed arguments off the stack
        pop       //remove previously pushed arguments off the stack
        pop
        call Base_println       //pushes return address of current subroutine on the stack,jumps to subroutine,swaps returned value (on stack) with ebp, pops ebp
        swap       //remove previously pushed arguments off the stack
        pop       //remove previously pushed arguments off the stack
        pop
        iconst 4
        call Builtin_malloc       //pushes return address of current subroutine on the stack,jumps to subroutine,swaps returned value (on stack) with ebp, pops ebp
        swap       //remove previously pushed arguments
        pop       //remove previously pushed arguments
        dup
        iconst 0
        iconst 112
        arraystore
        dup
        iconst 1
        iconst 105
        arraystore
        dup
        iconst 2
        iconst 40
        arraystore
        dup
        iconst 3
        iconst 41
        arraystore
        call Base_println       //pushes return address of current subroutine on the stack,jumps to subroutine,swaps returned value (on stack) with ebp, pops ebp
        swap       //remove previously pushed arguments off the stack
        pop       //remove previously pushed arguments off the stack
        pop
        call Math_pi       //pushes return address of current subroutine on the stack,jumps to subroutine,swaps returned value (on stack) with ebp, pops ebp
        call Base_println       //pushes return address of current subroutine on the stack,jumps to subroutine,swaps returned value (on stack) with ebp, pops ebp
        swap       //remove previously pushed arguments off the stack
        pop       //remove previously pushed arguments off the stack
        pop
        call Base_println       //pushes return address of current subroutine on the stack,jumps to subroutine,swaps returned value (on stack) with ebp, pops ebp
        swap       //remove previously pushed arguments off the stack
        pop       //remove previously pushed arguments off the stack
        pop
        iconst 3
        call Builtin_malloc       //pushes return address of current subroutine on the stack,jumps to subroutine,swaps returned value (on stack) with ebp, pops ebp
        swap       //remove previously pushed arguments
        pop       //remove previously pushed arguments
        dup
        iconst 0
        iconst 101
        arraystore
        dup
        iconst 1
        iconst 40
        arraystore
        dup
        iconst 2
        iconst 41
        arraystore
        call Base_println       //pushes return address of current subroutine on the stack,jumps to subroutine,swaps returned value (on stack) with ebp, pops ebp
        swap       //remove previously pushed arguments off the stack
        pop       //remove previously pushed arguments off the stack
        pop
        call Math_e       //pushes return address of current subroutine on the stack,jumps to subroutine,swaps returned value (on stack) with ebp, pops ebp
        call Base_println       //pushes return address of current subroutine on the stack,jumps to subroutine,swaps returned value (on stack) with ebp, pops ebp
        swap       //remove previously pushed arguments off the stack
        pop       //remove previously pushed arguments off the stack
        pop
        call Base_println       //pushes return address of current subroutine on the stack,jumps to subroutine,swaps returned value (on stack) with ebp, pops ebp
        swap       //remove previously pushed arguments off the stack
        pop       //remove previously pushed arguments off the stack
        pop
        iconst 0
        exit
subroutine Math_sqrt 1 args 2 locals       //pushes ebp, swaps that with the return address already on stack//
        iconst 0       //push local vars on the stack
        iconst 0       //push local vars on the stack
        fconst 0.0
        pop LOCAL 0
        push ARG 0
        fconst 2.0
        div
        pop LOCAL 1
        push LOCAL 1
        pop LOCAL 0
        push LOCAL 0
        push ARG 0
        push LOCAL 0
        div
        add
        fconst 2.0
        div
        pop LOCAL 1
  label whilestart12474
        push LOCAL 0
        push LOCAL 1
        sub
        fconst 0.0
        eq
        not
        not
        if-goto whileend12474
        push LOCAL 1
        pop LOCAL 0
        push LOCAL 0
        push ARG 0
        push LOCAL 0
        div
        add
        fconst 2.0
        div
        pop LOCAL 1
        goto whilestart12474
  label whileend12474
        push LOCAL 1
        swap       //take local variables off the stack
        pop       //take local variables off the stack
        swap       //take local variables off the stack
        pop       //take local variables off the stack
        swap       //swap return value with return address of the calling function in order to return
        return       //pops the return address in the caller subroutine off the stack, and continues there.
subroutine Math_abs 1 args 0 locals       //pushes ebp, swaps that with the return address already on stack//
  label ifstart49397
        push ARG 0
        iconst 0
        lt
        not
        if-goto else49397
        iconst -1
        push ARG 0
        mul
        swap       //swap return value with return address of the calling function in order to return
        return       //pops the return address in the caller subroutine off the stack, and continues there.
        goto ifend49397
  label else49397
  label ifend49397
        push ARG 0
        swap       //swap return value with return address of the calling function in order to return
        return       //pops the return address in the caller subroutine off the stack, and continues there.
subroutine Math_sign 1 args 0 locals       //pushes ebp, swaps that with the return address already on stack//
  label ifstart81577
        push ARG 0
        iconst 0
        gt
        not
        if-goto else81577
        iconst 1
        swap       //swap return value with return address of the calling function in order to return
        return       //pops the return address in the caller subroutine off the stack, and continues there.
        goto ifend81577
  label else81577
  label ifend81577
  label ifstart76019
        push ARG 0
        iconst 0
        eq
        not
        if-goto else76019
        iconst 0
        swap       //swap return value with return address of the calling function in order to return
        return       //pops the return address in the caller subroutine off the stack, and continues there.
        goto ifend76019
  label else76019
  label ifend76019
        iconst -1
        swap       //swap return value with return address of the calling function in order to return
        return       //pops the return address in the caller subroutine off the stack, and continues there.
subroutine Math_pow 2 args 2 locals       //pushes ebp, swaps that with the return address already on stack//
        iconst 0       //push local vars on the stack
        iconst 0       //push local vars on the stack
        iconst 1
        pop LOCAL 0
        iconst 0
        pop LOCAL 1
  label whilestart79557
        push LOCAL 1
        push ARG 1
        lt
        not
        if-goto whileend79557
        push LOCAL 0
        push ARG 0
        mul
        pop LOCAL 0
        push LOCAL 1
        iconst 1
        add
        pop LOCAL 1
        goto whilestart79557
  label whileend79557
        push LOCAL 0
        swap       //take local variables off the stack
        pop       //take local variables off the stack
        swap       //take local variables off the stack
        pop       //take local variables off the stack
        swap       //swap return value with return address of the calling function in order to return
        return       //pops the return address in the caller subroutine off the stack, and continues there.
subroutine Math_faculty 1 args 0 locals       //pushes ebp, swaps that with the return address already on stack//
  label ifstart19110
        push ARG 0
        iconst 1
        leq
        not
        if-goto else19110
        iconst 1
        swap       //swap return value with return address of the calling function in order to return
        return       //pops the return address in the caller subroutine off the stack, and continues there.
        goto ifend19110
  label else19110
  label ifend19110
        push ARG 0
        push ARG 0
        iconst 1
        sub
        call Math_faculty       //pushes return address of current subroutine on the stack,jumps to subroutine,swaps returned value (on stack) with ebp, pops ebp
        swap       //remove previously pushed arguments off the stack
        pop       //remove previously pushed arguments off the stack
        mul
        swap       //swap return value with return address of the calling function in order to return
        return       //pops the return address in the caller subroutine off the stack, and continues there.
subroutine Math_max 2 args 0 locals       //pushes ebp, swaps that with the return address already on stack//
  label ifstart33116
        push ARG 0
        push ARG 1
        gt
        not
        if-goto else33116
        push ARG 0
        swap       //swap return value with return address of the calling function in order to return
        return       //pops the return address in the caller subroutine off the stack, and continues there.
        goto ifend33116
  label else33116
  label ifend33116
        push ARG 1
        swap       //swap return value with return address of the calling function in order to return
        return       //pops the return address in the caller subroutine off the stack, and continues there.
subroutine Math_min 2 args 0 locals       //pushes ebp, swaps that with the return address already on stack//
  label ifstart49191
        push ARG 0
        push ARG 1
        lt
        not
        if-goto else49191
        push ARG 0
        swap       //swap return value with return address of the calling function in order to return
        return       //pops the return address in the caller subroutine off the stack, and continues there.
        goto ifend49191
  label else49191
  label ifend49191
        push ARG 1
        swap       //swap return value with return address of the calling function in order to return
        return       //pops the return address in the caller subroutine off the stack, and continues there.
subroutine Math_e 0 args 0 locals       //pushes ebp, swaps that with the return address already on stack//
        fconst 2.71828
        swap       //swap return value with return address of the calling function in order to return
        return       //pops the return address in the caller subroutine off the stack, and continues there.
subroutine Math_pi 0 args 0 locals       //pushes ebp, swaps that with the return address already on stack//
        fconst 3.14159
        swap       //swap return value with return address of the calling function in order to return
        return       //pops the return address in the caller subroutine off the stack, and continues there.
subroutine Base_print 1 args 0 locals       //pushes ebp, swaps that with the return address already on stack//
        push ARG 0
        call Base_printPInt       //pushes return address of current subroutine on the stack,jumps to subroutine,swaps returned value (on stack) with ebp, pops ebp
        swap       //remove previously pushed arguments off the stack
        pop       //remove previously pushed arguments off the stack
        pop
        iconst 0
        swap       //swap return value with return address of the calling function in order to return
        return       //pops the return address in the caller subroutine off the stack, and continues there.
subroutine Base_println 1 args 0 locals       //pushes ebp, swaps that with the return address already on stack//
        push ARG 0
        call Base_printPInt       //pushes return address of current subroutine on the stack,jumps to subroutine,swaps returned value (on stack) with ebp, pops ebp
        swap       //remove previously pushed arguments off the stack
        pop       //remove previously pushed arguments off the stack
        pop
        iconst 92
        call Base_printChar       //pushes return address of current subroutine on the stack,jumps to subroutine,swaps returned value (on stack) with ebp, pops ebp
        swap       //remove previously pushed arguments off the stack
        pop       //remove previously pushed arguments off the stack
        pop
        iconst 0
        swap       //swap return value with return address of the calling function in order to return
        return       //pops the return address in the caller subroutine off the stack, and continues there.
subroutine Base_printChar 1 args 0 locals       //pushes ebp, swaps that with the return address already on stack//
        push ARG 0
        call Builtin_putchar       //pushes return address of current subroutine on the stack,jumps to subroutine,swaps returned value (on stack) with ebp, pops ebp
        swap       //remove previously pushed arguments off the stack
        pop       //remove previously pushed arguments off the stack
        pop
        iconst 0
        swap       //swap return value with return address of the calling function in order to return
        return       //pops the return address in the caller subroutine off the stack, and continues there.
subroutine Base_printPInt 1 args 2 locals       //pushes ebp, swaps that with the return address already on stack//
        iconst 0       //push local vars on the stack
        iconst 0       //push local vars on the stack
  label ifstart64762
        push ARG 0
        iconst 10
        gt
        not
        if-goto else64762
        push ARG 0
        call Builtin_int2char       //pushes return address of current subroutine on the stack,jumps to subroutine,swaps returned value (on stack) with ebp, pops ebp
        swap       //remove previously pushed arguments off the stack
        pop       //remove previously pushed arguments off the stack
        call Builtin_putchar       //pushes return address of current subroutine on the stack,jumps to subroutine,swaps returned value (on stack) with ebp, pops ebp
        swap       //remove previously pushed arguments off the stack
        pop       //remove previously pushed arguments off the stack
        pop
        goto ifend64762
  label else64762
        push ARG 0
        iconst 10
        mod
        pop LOCAL 0
        push ARG 0
        iconst 10
        div
        pop LOCAL 1
        push LOCAL 1
        call Base_printPInt       //pushes return address of current subroutine on the stack,jumps to subroutine,swaps returned value (on stack) with ebp, pops ebp
        swap       //remove previously pushed arguments off the stack
        pop       //remove previously pushed arguments off the stack
        pop
        push LOCAL 0
        call Builtin_int2char       //pushes return address of current subroutine on the stack,jumps to subroutine,swaps returned value (on stack) with ebp, pops ebp
        swap       //remove previously pushed arguments off the stack
        pop       //remove previously pushed arguments off the stack
        call Builtin_putchar       //pushes return address of current subroutine on the stack,jumps to subroutine,swaps returned value (on stack) with ebp, pops ebp
        swap       //remove previously pushed arguments off the stack
        pop       //remove previously pushed arguments off the stack
        pop
  label ifend64762
        iconst 0
        swap       //take local variables off the stack
        pop       //take local variables off the stack
        swap       //take local variables off the stack
        pop       //take local variables off the stack
        swap       //swap return value with return address of the calling function in order to return
        return       //pops the return address in the caller subroutine off the stack, and continues there.
