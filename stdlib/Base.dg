

fn print ( [ char ] str ) ~> uint {
	i = 0 ;
	while( i < len(str) ){
		putchar(str[i]);
		i = i + 1;
	}
	return 0;
}

fn println ( [ char ] str) ~> uint {

	print(str);
	putchar('\n');
	return 0;
}	

fn printi (int x) ~> uint {

	if( x < 0 ){
	
		putchar('-');
	
		x = x * ( - 1 );
	}
	
	if( x < 10 ){
		putdigit(abs(x));
	}else{
	
		lastdigit = ( x % 10 );
		
		divided   = x / 10;
		printi(divided);
		putdigit(abs(lastdigit));
	}
	return 0;
}

/*
fn printfl (float f) ~> uint {
	//to print a float (without newline)
	if(f < 0.0 ){
		putchar('-');
		
		return printfl_positive( - f);
	}
	
	return printfl_positive(f);
}

fn fl_floordigit (float f)~> uint {
	//floors a single float digit which must be positive
	if(f < 1.0){
		return 0;
	}else
	
	return 1 + fl_floordigit(f - 1.0);
}

fn fl_floor(float f) ~> uint {
	//floors a positive float
	if(f < 10.0){
		return fl_floordigit(f);
	}
	int accumulator = 0;
	
	lastdigit = f % 10.0;
	accumulator = fl_floordigit(lastdigit);

	divided = f / 10.0;

	accumulator = accumulator + (10 * fl_floor(divided));

	return accumulator;
}

fn printfl_positive (float f) ~> uint {

	//print the integer part
	printi(fn_floor(f));
	putchar('.');
	
	// print the decimals, with 2 decimal places

	float decimal = f % 1.0;
	
	int decimals = fl_floor( (decimal * 100.0)  );

	printi(decimals);
	
	
	return 0;
}

*/
fn delay (uint seconds) ~> uint {

	start=time();
	while(
		(start+seconds)>time()
	){
		//do nothing
	}
	return 0;
}

fn assert (bool condition) ~> bool {
	if(condition){
		println("PASS");
	}else{
		println("FAIL");
	}
	return condition;
}

