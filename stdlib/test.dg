fn main() ~> int {

	test_math();
	
	test_bit();

	test_primes();

	test_intset();
	
	test_intstack();
	
	test_intarray();
	
	test_intbintree();
	
	test_intll();
	
	test_complex();

	printf("[stdlib] PASSED ALL TESTS\n");

	return 0;
}

fn test_complex() -> int {

	CInt a = makeCInt(1,2); //1+2i
	CInt b = makeCInt(2,3); //2+3i
	
	c = c_add(a,b);
	
	assert(c.r == 3);
	assert(c.i == 5);
	
	d = c_sub(b,a);
	
	assert(d.r == 1);
	assert(d.i == 1);
	
	e = c_pow(a, 4);
	
	assert(e.r == -7);
	assert(e.i == -24);
	
	free(a);
	free(b);
	free(c);
	free(e);

	return 0;
}

fn test_intll() -> int {

	IntLL ll = intll_ctor();
	
	intll_push_back(ll, 3); //[3]
	
	assert(ll.size == 1);
	
	assert(intll_peek_front(ll) == 3);
	assert(intll_peek_back(ll) == 3);
	
	intll_push_front(ll, 5); //[5,3]
	
	assert(intll_index_of(ll, 3) == 1);
	
	assert(intll_pop_front(ll) == 5); //[3]
	
	assert(ll.size == 1);
	
	intll_pop_back(ll); //[]
	
	assert(ll.size == 0);
	
	intll_dtor(ll);

	return 0;
}

fn test_intbintree() -> int {

	IntBinTree t = intbintree_ctor();
	
	intbintree_insert(t, 3);
	
	assert(intbintree_contains(t, 3));
	assert(intbintree_size(t) == 1);
	
	return 0;
}

fn test_intarray() -> int {

	
	[int] arr = malloc(4*2);
	arr[0] = 3;
	arr[1] = 5;

	assert(intarray_sum(arr, 2) == 8);
	assert(intarray_average(arr, 2) == 4);
	
	assert(intarray_min(arr, 2) == 3);
	assert(intarray_max(arr, 2) == 5);

	return 0;
}

fn test_intstack() -> int {
	
	IntStack s = intstack_ctor(10);
	
	intstack_push(s, 3);
	assert(intstack_size(s) == 1);
	assert(intstack_peek(s) == 3);
	assert(intstack_pop(s) == 3);
	
	assert(intstack_size(s) == 0);
	
	intstack_dtor(s);
	
	return 0;
}

fn test_intset() -> int {

	IntSet s = intset_ctor(10);

	assert(intset_size(s) == 0);
	
	assert(!intset_contains(s,3));

	intset_insert(s,3);
	
	assert(intset_contains(s,3));
	assert(intset_size(s) == 1);

	intset_remove(s,3);
	assert(!intset_contains(s,3));

	intset_insert(s,0);
	for i in 1 .. 9 {
		
		intset_insert(s,i);
		assert(intset_contains(s,i-1));
	}

	intset_dtor(s);

	return 0;
}

fn test_bit() -> int {

	assert(bit(0b10, 1) == 1);
	assert(bit(0b10, 0) == 0);
	assert(bit(0b10001000, 7) == 1);

	return 0;
}

fn test_math() -> int {

	assert(sign(4) == 1);
	assert(sign(-8) == -1);

	assert( pow(2,3) == 8 );

	assert( faculty(3) == 6 );

	assert( min(4,5) == 4 );

	assert( max(2,6) == 6 );

	assert(gcd(10,15) == 5);
	assert(lcm(15,20) == 60);

	assert(round(3.5) == 4);
	assert(round(3.2) == 3);

	assert(ceil(3.2) == 4);
	assert(floor(3.7) == 3);
	
	assert(fib(1) == 0);
	assert(fib(2) == 1);
	assert(fib(3) == 1);
	assert(fib(4) == 2);
	assert(fib(5) == 3);

	return 0;
}

fn test_primes() -> int {

	assert(isprime(2));
	assert(isprime(3));
	assert(!isprime(4));
	assert(isprime(5));

	return 0;
}

