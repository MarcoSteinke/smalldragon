fn main() ~> int {

	test_math();
	
	test_bit();

	test_primes();

	test_intset();
	
	test_intstack();

	printf("[stdlib] PASSED ALL TESTS\n");

	return 0;
}

fn test_intstack() -> int {
	
	IntStack s = intstack_ctor(10);
	
	intstack_push(s, 3);
	assert(intstack_size(s) == 1);
	assert(intstack_peek(s) == 3);
	assert(intstack_pop(s) == 3);
	
	assert(intstack_size(s) == 0);
	
	intstack_dtor(s);
	
	return 0;
}

fn test_intset() -> int {

	IntSet s = intset_ctor(10);

	assert(intset_size(s) == 0);
	
	assert(!intset_contains(s,3));

	intset_insert(s,3);
	
	assert(intset_contains(s,3));
	assert(intset_size(s) == 1);

	intset_remove(s,3);
	assert(!intset_contains(s,3));

	intset_insert(s,0);
	for i in 1 .. 9 {
		
		intset_insert(s,i);
		assert(intset_contains(s,i-1));
	}

	intset_dtor(s);

	return 0;
}

fn test_bit() -> int {

	assert(bit(0b10, 1) == 1);
	assert(bit(0b10, 0) == 0);
	assert(bit(0b10001000, 7) == 1);

	return 0;
}

fn test_math() -> int {

	assert(sign(4) == 1);
	assert(sign(-8) == -1);

	assert( pow(2,3) == 8 );

	assert( faculty(3) == 6 );

	assert( min(4,5) == 4 );

	assert( max(2,6) == 6 );

	assert(gcd(10,15) == 5);
	assert(lcm(15,20) == 60);

	assert(round(3.5) == 4);
	assert(round(3.2) == 3);

	assert(ceil(3.2) == 4);
	assert(floor(3.7) == 3);
	
	[int] arr = malloc(4*2);
	arr[0] = 3;
	arr[1] = 5;

	assert(sum(arr, 2) == 8);
	assert(average(arr, 2) == 4);
	
	assert(fib(1) == 0);
	assert(fib(2) == 1);
	assert(fib(3) == 1);
	assert(fib(4) == 2);
	assert(fib(5) == 3);

	return 0;
}

fn test_primes() -> int {

	assert(isprime(2));
	assert(isprime(3));
	assert(!isprime(4));
	assert(isprime(5));

	return 0;
}

