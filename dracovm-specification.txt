
DracoVM is supposed to be a stack based, compiled VM Language.
It is ispired by the Jack VM (from Nand2Tetris)

Commands supported:
(for now commands support just integers)

hypothetical STACK:
x
a
b

the RETURNS is what is left on the stack after operands have been popped
1 means true,
0 means false

COMMAND	RETURNS	COMMENT
	add	a+b	integer addition
	sub	a-b	integer subtraction
	neg	-b	integer inversion
	eq	1 or 0	equality
	gt	1 or 0 	>
	lt	1 or 0	<
	geq	1 or 0	>=
	leq	1 or 0	<=

	and	1 or 0	conjunction
	or	1 or 0	disjunction
	not	1 or 0	negation

VIRTUAL MEMORY SEGMENTS
	the DracoVM manipulates various virtual memory segments
	these memory segments have pointers which have a constant address in virtual memory
	and can be used to access these segments

	ARG	arguments to the subroutine
	LOCAL	local variables for the subroutine
	STATIC	static variables which have a constant virtual memory address


ACCESSING MEMORY SEGMENTS:
	ipush	n		//push a constant integer on the stack
	fpush	x		//push a float constant on the stack
	push 	SEGMENT index
	pop 	SEGMENT index


PROGRAM FLOW COMMANDS:
	label	SYMBOL  //globally unique label for jumping
	goto 	SYMBOL  //jump to a label specified earlier
	if-goto	SYMBOL  //jumps to that label if TOP OF STACK is true (1)

SUBROUTINE CALLING COMMANDS:
	subroutine	SUBRNAME nLocals 
	//number of local variables
	call 		SUBRNAME nArgs	 
	//nArgrs is number of arguments (is the same always, for a subroutine)
	return
	//transfer control back to the calling function
//all subroutines must pop all their arguments off the stack and always leave 1 return
//value on the stack

BUILTIN SUBROUTINES:
	println		//prints the integer on stack, and a newline
	print		//prints the integer on stack
	read		//reads an integer from stdin, pushes it on the stack
