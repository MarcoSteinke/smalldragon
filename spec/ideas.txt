i want to create a custom VM (or intermediate level) language for this language.
that can then be compiled to assembly.

Because i do not want to run into constraints imposed by the object oriented JVM
when implementing.
the Bytecodes are in binary and that kind of annoys me aswell.

i want complete freedom at all levels of abstraction
with this language. this enables me to implement features where i want,
and not have to deal with the interfaces of the jvm which i cannot change.

idea:

.dg -(draco compiler)-> .dgvm -(dracovm compiler)-> .asm -(nasm)-> executable machine code


//https://cs.nyu.edu/courses/spring07/G22.3130-001/code_gen.html
//https://cs.nyu.edu/courses/spring03/G22.2130-001/386_assembly_reference.txt

//https://stackoverflow.com/questions/58089756/how-does-functional-programming-work-at-the-assembly-level/58089889#58089889