
ArrayConstant ::= '[' expression (',' expression)* ']'

AST ::= namespace+

namespace ::= accessmodifier? 'namespace' SimpleType '{' structDecl* method* '}'

structDecl ::= 'struct' SimpleType '{' structMemberDecl (',' structMemberDecl)* '}'

structMemberDecl ::= Type identifier

SubroutineType ::= '(' Type* ')' arrow ( SimpleType | '(' SubroutineType ')' )
SimpleType ::= upperCaseLetter alphanumeric*
Type ::= SimpleType | SubroutineType

variable ::= identifier ('[' expression ']')?

method ::= accessmodifier '(' declaredArgument* ')' arrow Type identifier '{' statement* '}'

declaredArgument ::= Type identifier

statement ::= ( methodCall ';' | whileStatement | ifStatement | returnStatement | assignmentStatement )

methodCall ::= identifier '(' (expression (, expression)*)?  ')'

loopStatement ::= 'loop' expression '{' statement* '}'
whileStatement ::= 'while' '(' expression ')' '{' statement* '}'
ifStatement ::= 'if' '(' expression ')' '{' statement* '}' ( 'else' '{' statement* '}' )?
returnStatement ::= 'return' expression? ';'

assignmentStatement ::= variable '=' expression ';'

Term ::= ArrayConstant | boolConstant | integerConstant | charConstant | keywordConstant | methodCall | '(' expression ')' | unaryOp term | variable

expression ::= Term (op Term)*













