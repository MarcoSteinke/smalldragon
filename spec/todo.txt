TODO:

[ ] maybe implement the primitive "Anything" Type.
    this would be helpful for implementing various subroutines that operate on arrays. i could implement a builtin
    subroutine "arrlen" that would determine the length of any arrays (arrays should be length-prefixed in dragon).
    ...
    thinking about "Anything" Type, what if we shorten that to "*" and it looks even cooler with Type Constraints.
    Like "public Int print((* implements IShow) item){...}".

[ ] write a lot of tests to protect our functional programming features against regression!

[ ] write tests for the different typechecking classes and what they typecheck

[ ] check in typechecking that the correct type signature
    is used for subroutines with side effects ('~>') and for subroutines without side effects ('->')
    and also note it in the symbol table

[ ] typecheck that there should be no assignment to arguments.
    assignment to members of arguments is ok in subroutines with side effecs

[ ] add a foreach loop to iterate over an array
    for PInt x in arr {

    }

[ ] enable multi-line strings. newlines in sourcecode should then
    be converted into newlines in the string.

[ ] read https://hackernoon.com/considerations-for-programming-language-design-a-rebuttal-5fb7ef2fd4ba

[ ] read https://doc.rust-lang.org/book/foreword.html

[ ] maybe get smalldragon into some official repository (long term goal)

[ ] enable setting dependent types for primitive variables.

[ ] enable structs to use type parameters (generics)

[ ] full incremental compilation support

[ ] enable integers to be typed as even or odd

[ ] subroutine arguments should be immutable. assignments to them
    should throw a type error.

[ ] read
    - http://beza1e1.tuxen.de/federation_future.html
    - http://beza1e1.tuxen.de/strings.html
    - http://beza1e1.tuxen.de/articles/better_c.html 
    - http://beza1e1.tuxen.de/articles/faster_than_C.html
    - http://beza1e1.tuxen.de/articles/proglang_mistakes.html

[ ] write a test that valgrinds finds no memory leaks when executing all 3 test suites

[ ] write a test that all files in examples/ transpile and compile

[ ] write tests for comparison operator chaining
