BUGS:
 - [ ] struct 'CaseStmt' is missing options for HexConst, BinConst
 - [ ] dragon-lexer sometimes passes '//' through from input to output.

TODO (OTHER):

 - [ ] enable setting dependent types for primitive variables.

 - [ ] enable structs to use type parameters (generics)

 - [ ] subroutine arguments should be immutable. assignments to them should throw a type error.

 - [ ] implement typeclasses
 
 - [ ] enum Support
 
 - [ ] a union for const values (without StringConst) is present in both 'Term' and 'CaseStmt'.
       maybe extract struct 'ConstValue'
 
 - [ ] enable void functions, also [void] which would transpile to void* which is often used.

TODO (libsmall)
 - [ ] libsmall should be a large (haha) standard library for smalldragon
       containing various functions, algorithms and data structures.

TODO (MODULES/INCLUDE/IMPORT):

 - [ ] include only the headers in transpiled code that are really needed

 - [ ] implement passthrough '#include' directives which are directly
    transpiled into the C code and have no effect on the smalldragon code.
    smalldragon then should have a facility to declare external 
    subroutines that should exist in c code that is linked later.
    so C code can be called in smalldragon files.

 - [ ] only transpile the subroutines which are actually called
       (dead code analysis)
    
TODO (TYPECHECKING):

 - [ ] check in typechecking that the correct type signature
    is used for subroutines with side effects ('~>') 
    and for subroutines without side effects ('->')
    and also note it in the symbol table

 - [ ] typecheck that there should be no assignment to arguments.
    assignment to members of arguments is ok in subroutines with side effecs


TODO (READ):
 - http://beza1e1.tuxen.de/federation_future.html
 - http://beza1e1.tuxen.de/strings.html
 - http://beza1e1.tuxen.de/articles/better_c.html 
 - http://beza1e1.tuxen.de/articles/faster_than_C.html
 - http://beza1e1.tuxen.de/articles/proglang_mistakes.html
 - https://hackernoon.com/considerations-for-programming-language-design-a-rebuttal-5fb7ef2fd4ba
 - https://doc.rust-lang.org/book/foreword.html

    
TODO (TESTS):
 - [ ] write tests for comparison operator chaining
 - [ ] write a lot of tests to protect our functional programming features against regression!
 - [ ] write tests for the different typechecking classes and what they typecheck

