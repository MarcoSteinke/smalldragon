Add to readme:

Dragon is inspired by the simplicity and power of C programming.

It aims to provide a modern language which captures the unique feeling of C programming.

When using modern languages, which are great, such as Java, C++, Haskell, even Rust, I feel like they put too many features which do not always play together well.

Examples are the loopholes to the purity in Haskell, such as UnsafePerformIO
and Reflection in Java. Also the low-level features and bloat found in C++.
No one needs a language to do everything from low to high level. You can link code from different languages together. C++ would be great without trying to be a superset to C.

Also many modern languages try to make up their own names for the classic functions of the C standard library.

Dragon will try to use the classic names such as fopen, fclose,printf,...

Also, Dragon will try to mostly use names already known from other languages, such as the List interface from Java.

All this is so that the programmer can focus and does not have to look at documentation all the time.

For simplicity, Dragon will in the near future support 3 main parts.

Structs, Subroutines, Enums

Enums provide a way to store a limited set of values of the same type, as a type.

enum Difficulty of String{
"Easy",
"Hard"
}

enum A of Point {
{1,2},
{3,6}
}

This can also be done for structs or subroutines or enums themselves.
With enums themselves it would basically make a subset.

All members of the enum must be constant expressions.

Also, there should be a feature to use the compiler at the command line as a search engine for documentation about the standard library and which functions are available in a module.

This is so you are not relying on internet all the time like with many langs.

Just mention the name of the namespace to the compiler and get a list of subroutine signatures.
