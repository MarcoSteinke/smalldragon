
//this file defines the grammar for the dragon language.
//the language can be written with indentation, or with curly braces,
//depending on your preferences. before lexing, if there is indentation, it is replaced with curly braces
//so everything after that brace-weaving recognizes only the curly braces variation

//TODO: think about how to parse statements in method,
//if the semicolons should perhaps be weaved in also or if we can do it otherwise

//using regex notation , so '?' at the end means optional, and '+' means once or more

//TODO

int ::= ... | -1 | 0 | 1 | 2 | ...

//underscore should also be here
char ::= 'a' | ... | 'z' | 'A' | ... | 'Z' | '_'

alphanumeric ::= int | char

identifier ::= char alphanumeric*

string ::= '"' alphanumeric* '"'

accessmodifier ::= public | private

class ::= accessmodifier class identifier '{' classField* method* '}'

classField ::= accessmodifier? Type identifier ';'

Type ::= identifier

methodName ::= identifier

method ::= accessmodifier returnType methodName '(' declaredArgument* ')' '{' statement* '}'

//alternative, haskell-like version
method ::= accessmodifier methodName '::' (Type smallarrow)* Type '{' statement* '}'

smallarrow ::= '->'

returnType ::= 'void' | Type

declaredArgument ::= Type identifier

//TODO
statement ::= methodCall

//TODO: work on this, this is not done
methodCall ::= identifier '(' ( (string (, string)*) | string ) ')'


