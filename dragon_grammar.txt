
//this file defines the grammar for the dragon language.

//it is sometimes inconsistent with the AST Node classes in src/ , but 
//the goal is for both to be consistent with each other

//using regex notation , so '?' at the end means optional, and '+' means once or more
//TODO
//-----------------------------------------------------------------------------

int ::= ... | -1 | 0 | 1 | 2 | ...
charConstant ::= 'a' | ... | 'z' | 'A' | ... | 'Z'
alphanumeric ::= int | charConstant | '_'
identifier ::= charConstant alphanumeric*
string ::= '"' alphanumeric* '"'

op ::= '+' | '-' | '*' | '/' | ...
unaryOp ::= '-' | '!'
boolConstant ::= 'true' | 'false'

arrayConstant ::= '[' expression (',' expression)* ']'

keywordConstant ::= 'null' | 'this' | booleanConstant
accessmodifier ::= public | private

class ::= accessmodifier? class identifier '{' compilerDirective*  classField* method* '}'

compilerDirective ::= 'includestatic' PATH ';' //any valid path to a .dg file. PATH is a string token

classField ::= accessmodifier? Type identifier ';'

Type ::= identifier 

variable ::= identifier ('[' expression ']')?

methodName ::= identifier

//i want to split it into Void method and Value Method
//and ... wait ... what if we eliminate Void from the language? that would
//make so many things easier since every method and every function would return a value
//and a programmer could simply make the method as Int and return 0;
//maybe that could be integrated into the Void method/function

method ::= accessmodifier Type methodName '(' declaredArgument* ')' '{' statement* '}'

//TODO: implement the below
// // functions are always public
//functionTypeDecl ::= functionName '::' (Type '->')* Type
// // like in haskell, there should be pattern matching available, so multiple definitions depending
// // on the value of the pattern
//function ::= namedFunction | anonFunction
//namedFunction ::= functionName identifier* = value
//value ::= arrayConstant | boolConstant | integerConstant | string | keywordConstant | functionCall | value op value | ...
//functionName ::= identifier
//functionCall ::= functionName expression*
//anonFunction ::= '\' declaredArgument* '->' value

declaredArgument ::= Type identifier

//some of these have the semicolon themselves,
statement ::= ( methodCall ';' | whileStatement | ifStatement | returnStatement | assignmentStatement )

methodCall ::= methodName '(' (expression (, expression)*)?  ')'

loopStatement ::= 'loop' expression '{' statement* '}'
whileStatement ::= 'while' '(' expression ')' '{' statement* '}'
ifStatement ::= 'if' '(' expression ')' '{' statement* '}' ( 'else' '{' statement* '}' )?
returnStatement ::= 'return' expression? ';'

assignmentStatement ::= variable '=' expression ';'

term ::= arrayConstant | boolConstant | integerConstant | string | charConstant | keywordConstant | methodCall | '(' expression ')' | unaryOp term | variable

expression ::= term (op term)*

//this is a kind of expression inspired by haskell.
//it is similar to the ternary operator
//TODO: implement it
ifThenElse ::= 'if' expression 'then' expression 'else' expression

//TODO: these rules below are speculation. they are not yet in the language
object ::= identifier
objectOrVariable ::= variable | fieldAccess | object
fieldAccess ::= object '.' object | object '.' methodCall | methodCall '.' object
