//#include <SDL2/SDL.h>
//#include <stdio.h>
///usr/include/SDL2/SDL.h 

struct Planet {
	uint id;
	V2 pos;
	V2 velocity;
	float mass; //proportional to size
	uint32 color;
	uint32 size;
	bool live;
}
fn planet_ctor()~>Planet{
	Planet r = malloc(3*4 + 3*8 + 8);
	
	r.id       = rand() % 100000;
	r.pos      = v2_ctor(0.0,0.0);
	r.velocity = v2_ctor(0.0,0.0);

	r.mass = 10.0;
	r.size = 10;
	r.color = mycolor(200,200,200);
	r.live = true;
	return r;
}
fn planet_dtor(Planet p) ~> bool { 
	v2_dtor(p.pos); v2_dtor(p.velocity);
	free(p); return true;
}
fn main ()~>int {
	
	srand(time(0));
	
	int screen_width  = 1800; int screen_height = 900;
	uint32 sdl_init_video = 0x00000020;
	
	if(sdl_init(sdl_init_video) < 0){
		printf("SDL could not initialize! SDL Error: %s\n", sdl_get_error());
		exit(1);
	}
	
	uint32 sdl_windowpos_undefined = 0x1FFF0000;
	uint32 sdl_window_shown = 0x00000004;
	SDL_Window window = sdl_create_window("SDL Tutorial", 
		sdl_windowpos_undefined, sdl_windowpos_undefined,
		screen_width, screen_height, sdl_window_shown);
	//if(window == NULL){
	//	printf("window could not be created! SDL Error: %s\n", SDL_GetError());
	//	exit(1);
	//}
	
	inner(window, screen_width, screen_height);
	
	return 0;
}

fn fillbg(SDL_Surface surface)~>bool{
	
	//SDL_FillRect(screenSurface, NULL, SDL_MapRGB(screenSurface->format, 0xff, 0xff, 0xff));
	
	sdl_fill_rect(surface, 0, mycolor(0,0,0));
	return true;
}

fn mycolor(uint8 r, uint8 g, uint8 b) -> uint32 {
	uint32 color = (r << 16) | (g << 8) | (b);
	return color;
}

fn init_planet(Planet p, int width, int height) ~> bool {

	p.pos.x1 = 1.0*(rand()%width);
	p.pos.x2 = 1.0*(rand()%height);
	
	p.velocity.x1 = 1.0*(rand()%20);
	p.velocity.x2 = 1.0*(rand()%20);
	
	if(p.pos.x1 >= width/2){
		p.velocity.x1 *= -1.0;
	}
	
	if(p.pos.x2 >= height/2){
		p.velocity.x2 *= -1.0;
	}
	
	//earth mass, approximated
	p.mass = 5972000000000000000000000.0;
	
	p.size = (rand()%100)+10;
	p.mass *= 0.01 * p.size;
	
	p.color = mycolor(rand()%256,rand()%256,rand()%256);
	p.live = true;
	
	return true;
}
fn init_planets(uint n, int width, int height)~>[Planet] {
	
	[Planet] planets = malloc(8*n);
	
	for i in 0 .. (n-1) {
		Planet p = planet_ctor();
		init_planet(p, width, height);
		planets[i] = p;
	}
	
	return planets;
}
fn planet_draw(SDL_Surface surface, Planet p)~>bool {

	if(!p.live){ return true; }

	SDL_Rect rect = malloc(4*4);
	rect.x = p.pos.x1;
	rect.y = p.pos.x2;
	
	rect.w = p.size;
	rect.h = p.size;
	
	sdl_fill_rect(surface, rect, p.color);
	free(rect);
	return true;
}
fn gravity(V2 p1, V2 p2, float mass1, float mass2) ~> float {

	//around * 10^(-11)
	g_const = 6.67430 * 0.00000000001;

	//distance here should be in meters
	//but max distance on screen would be 
	//screen_width.
	//so multiply generously
	float dist = v2_dist(p1, p2);
	
	//do not calculate force if planets
	//are too close. will break calculations otherwise.
	if dist < 40.0 { return -1.0; }
	
	dist *= 227940000.0;
	dist *= 1000000000.0;
	//dist *= 100000000000000000.0;
		
	//force = g_const * (mass1 * mass2) / (dist*dist);
	force = g_const * (mass1/dist)* (mass2/dist);
	
	return force;
}
fn planet_update(Planet p, [Planet] planets, uint n) ~> bool {
	
	if(!p.live){ return true; }
	
	//printf("planet velocity: %f, %f\n", p.velocity.x1, p.velocity.x2);
	
	v2_add(p.pos, p.velocity);
	
	float a_x = 0.0;
	float a_y = 0.0;
	
	for i in 0 .. (n-1) {
	
		Planet p2 = planets[i];
		
		if(p.id == p2.id){ continue; }
		if(!p2.live){ continue; }
		
		float force = gravity(p.pos, p2.pos, p.mass, p2.mass);
		
		if force < 0.0 {
			//collision
			if p.mass > p2.mass {
				p.mass += p2.mass;
				p.size += p2.size;
				p2.live = false;
			} else {
				p2.mass += p.mass;
				p2.size += p.size;
				p.live = false;
			}
			return true;
		}
		
		//printf("force: %f\n", force);
		
		//direction vector
		V2 dir = v2_copy(p2.pos);
		v2_sub(dir, p.pos);
		
		v2_normalize(dir);
		
		V2 force_vect = v2_copy(dir);
		v2_scale(force_vect, force);
		
		v2_add(p.velocity, force_vect);
	}
	
	return true;
}
fn out_of_bounds(Planet p, int width, int height)-> bool{

	return 0 <= p.pos.x1 <= width && 0 <= p.pos.x2 <= height;
}
fn inner(SDL_Window window, int width, int height)~>bool{
	
	SDL_Surface surface = sdl_get_window_surface(window);
	
	uint n = 5;
	[Planet] planets = init_planets(n, width, height);
	
	uint seconds = 8;
	uint millis = seconds * 1000;
	uint n_steps = seconds * 30;
	uint millis_per_step = millis/n_steps;
	
	uint count_steps = 0;
	while (n_steps > count_steps){
		
		fillbg(surface);
		
		uint count_in_view = 0;
		
		for j in 0 .. (n-1) {
			
			Planet p = planets[j];
			
			planet_draw(surface, p);
			planet_update(p, planets, n);
			
			
			if p.pos.x1 >= width { p.pos.x1 = 0.0; }
			if p.pos.x1 < 0.0 { p.pos.x1 = width*1.0; }
			
			if p.pos.x2 >= height { p.pos.x2 = 0.0; }
			if p.pos.x2 < 0.0 { p.pos.x2 = height*1.0; }
			
			if out_of_bounds(p, width, height) {
				count_in_view++;
			}
		}
		
		if count_in_view == 0 { return true; }
		
		sdl_update_window_surface(window);
		sdl_delay(millis_per_step);
		count_steps++;
	}
	
	return true;
}
