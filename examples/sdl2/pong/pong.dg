#include <SDL2/SDL.h>
#include <SDL2/SDL_rect.h>
#include <SDL2/SDL_events.h>
#include <stdlib.h>
#include <stdio.h>

#include "getkey.h"

externc fn getkey()~>char "getkey"
externc fn ftoi(float f)->int "ftoi"
struct Paddle {
	int x; int y;
	int width; int size;
}
struct Ball {
	int x; int y; int size;
	V2 velocity;
}
fn main()~>int {
	int screen_width  = 1000; int screen_height = 800;
	uint32 sdl_init_video = 0x00000020;
	
	if(sdl_init(sdl_init_video) < 0){
		printf("SDL could not initialize! SDL Error: %s\n", sdl_get_error());
		return 1;
	}
	
	uint32 sdl_windowpos_undefined = 0x1FFF0000;
	uint32 sdl_window_shown = 0x00000004;
	SDL_Window window = sdl_create_window("SDL Tutorial", 
		sdl_windowpos_undefined, sdl_windowpos_undefined,
		screen_width, screen_height, sdl_window_shown);
	
	inner(window, screen_width, screen_height);
	
	return 0;
}
fn fillbg(SDL_Surface surface)~>bool{
	sdl_fill_rect(surface, 0, mycolor(0,0,0));
	return true;
}
fn mycolor(uint8 r, uint8 g, uint8 b) -> uint32 {
	return (r << 16) | (g << 8) | (b);
}
fn draw_paddle(SDL_Surface surface, Paddle p)~>bool{
	
	SDL_Rect rect = malloc(4*4);
	
	rect.w = p.width;
	rect.h = p.size;
	
	rect.x = p.x*1.0;
	rect.y = (p.y-(rect.h/2))*1.0;
		
	sdl_fill_rect(surface, rect, mycolor(100,50,200));
	return true;
}
fn draw_ball(SDL_Surface surface, Ball ball, int ms)~>bool{
	
	SDL_Rect rect = malloc(4*4);
	rect.w = ball.size;
	rect.h = ball.size;
	
	rect.x = 1.0*(ball.x - (ball.size/2));
	rect.y = 1.0*(ball.y - (ball.size/2));
	
	color = mycolor(200,50,100);
	sdl_fill_rect(surface, rect, color);
	
	return true;
}
fn process_input(Paddle p, uint height)~>bool{
	
	char key = getkey();
	
	uint speed = 8;
	
	//control paddle with arrow keys
	switch key {
		case 'u' {
			p.y -= speed;
			if p.y < 0 { p.y = 0; }
		}
		case 'd' {
			p.y += speed;
			if p.y >= height { p.y = height; }
		}
		// press q to quit
		case 'q' { return false; }
		case ' ' { /*nothing*/ }
	}
	return true;
}
fn is_ball_on_paddle(Paddle p, Ball ball) ~> bool {

	if ball.x >= p.x {
		if (p.y-p.size/2) <= ball.y <= (p.y+p.size/2) {
			return true;
		}
	}
	return false;
}
fn update_ball(Ball ball, Paddle p1, Paddle p2, int width, int height)~>bool{
	
	ball.x += ftoi(ball.velocity.x1);
	ball.y += ftoi(ball.velocity.x2);
	
	bool hit = false;
	
	if ball.x <= (p1.x+p1.width) {
		if is_ball_on_paddle(p1, ball) {
			hit = true;
			p1.size = height/2;
			ball.velocity.x2 += 0.05*(ball.y - p1.y);
		}
	}
	
	if ball.x >= (p2.x-p2.width) {
		if is_ball_on_paddle(p2, ball) {
			hit = true;
			p2.size = height/2;
			ball.velocity.x2 += 0.05*(ball.y - p2.y);
		}
	}
	
	if hit {
		ball.size = 60;
		ball.velocity.x1 *= -1.0; 
	}
	
	if ball.x < 0 || ball.x > width { 
		return false; //loss condition
	}
	
	if ball.y < 0 || ball.y > height { 
		ball.velocity.x2 *= -1.0; 
	}
	
	return true;
}
fn enemy_move(Paddle p2, Ball ball)~>bool{
	
	uint speed = 3;
	delta = ball.y - p2.y;
	
	p2.y += speed * sign(delta);
	return true;
}
fn inner(SDL_Window window, int width, int height)~>bool{
	
	SDL_Surface surface = sdl_get_window_surface(window);
	
	Paddle p1 = malloc(4*4);
	Paddle p2 = malloc(4*4);
	Ball ball = malloc(4*3+8);
	
	bool in_bounds = true;
	uint paddle_size_normal = 200;
	
	p1.y = height/2; p2.y = height/2;
	p1.width = 10; p2.width = 10;
	p1.size = paddle_size_normal; 
	p2.size = paddle_size_normal;
	p1.x = 10;
	p2.x = width - (p1.width+10);
	
	ball.x = width/2;
	ball.y = height/2;
	ball.velocity = v2_ctor(5.0,0.0);
	uint ball_size_normal = 20;
	
	int ms = 0;
	
	while(in_bounds){
		
		if ball.size > ball_size_normal { ball.size--; }
		
		if p1.size > paddle_size_normal { p1.size--; }
		if p2.size > paddle_size_normal { p2.size--; }
		
		//draw game
		fillbg(surface);
		
		draw_paddle(surface, p1);
		draw_paddle(surface, p2);
		
		draw_ball(surface, ball, ms);
		
		if !update_ball(ball, p1, p2, width, height) {
				
			//loss 
			return false;
		}
		
		if !process_input(p1, height) { return false; }
		
		enemy_move(p2, ball);
		
		sdl_update_window_surface(window);
		sdl_delay(5);
		ms += 5;
	}
		
	return true;
}
