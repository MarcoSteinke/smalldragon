//i want to split it into Void method and Value Method
//and ... wait ... what if we eliminate Void from the language? that would
//make so many things easier since every method and every function would return a value
//and a programmer could simply make the method as int and return 0;
//maybe that could be integrated into the Void method/function


//'AST' is the root AST Node

//inspiration: https://docs.oracle.com/javase/specs/jls/se7/html/jls-18.html

//dragon_grammar.txt is sometimes inconsistent with the AST Node classes in src/ , but
//the goal is for both to be consistent with each other


//in the grammar files i am using regex notation , so '?' at the end means optional, and '+' means once or more, and so on



//           dragon_grammar_nodes.txt
// defines the grammar for the dragon language.
// Tt defines the nodes recognized by the parser.

//           dragon_grammar_tokens.txt
// defines the tokens recognized by the lexer.

Recently thought about subroutine type signatures and
how subroutines are declared in dragon.

Usually it is a long line containing the access modifiers, types, and argument names.
There has to be a better way to express it.

//this currently looks the best to me
//because it seperates the implementation,
//the types, and the interesting properties we also want to track.
//These 'concepts' exist in their own world, but are connected by the name of the subroutine.
//They are also connected by being close together.
//To be clear, the order of them in source code would be fixed as shown.


subr :: @{terminates, public}
subr :: (uint a, uint b) -> uint
subr :: {
        return a+b;
}


//that there are no '(' ')' parentheses required
//for if-statements and while-statements
//is inspired by rust. it is simply not needed. 
//of course you can still write them if you want,
//because every expression can be surrounded by parentheses
